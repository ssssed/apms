// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ProjectStatus {
  BACKLOG
  IN_PROGRESS
  TESTING
  REALISED
  REJECTED
}

model User {
  id          Int      @id @default(autoincrement())
  role        Role     @default(USER)
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String   @unique
  password    String
  tel         String?
  displayRole String?  @map("dispay_role")
  avatar      String?
  createAt    DateTime @default(now()) @map("create_at")
  updateAt    DateTime @updatedAt @map("update_at")

  tasks       Task[]
  TaskComment TaskComment[]
  Project     Project[]

  @@map("users")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  projects Project[] @relation("ProjectTags")

  @@map("tags")
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  status      ProjectStatus @default(BACKLOG)
  createAt    DateTime      @default(now())

  User     User?  @relation(fields: [authorId], references: [id])
  authorId Int?   @map("author_id")
  tags     Tag[]  @relation("ProjectTags")
  Task     Task[]

  @@map("projects")
}

enum NotificationStates {
  Sent
  Read
  Seen
  Cancelled
  Failed
  Deleted
  Created
}

model Notification {
  id       Int                @id @default(autoincrement())
  status   NotificationStates @default(Created)
  message  String
  createAt DateTime           @default(now()) @map("create_at")
  updateAt DateTime           @updatedAt @map("update_at")

  @@map("notifications")
}

enum TaskStatus {
  BACKLOG
  TODO
  SELECT_TO_DEVELOPMENT
  IN_PROGRESS
  REVIEW
  TESTING
  DONE
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus
  priority    Int
  order       Int
  updatedAt   DateTime   @default(now()) @map("updated_at")
  createAt    DateTime   @default(now()) @map("create_at")
  endAt       DateTime   @default(dbgenerated("(CURRENT_DATE + INTERVAL '14 days')")) @map("end_at")

  Project     Project?      @relation(fields: [projectId], references: [id])
  projectId   Int?          @map("project_id")
  User        User?         @relation(fields: [assignId], references: [id])
  assignId    Int?          @map("assign_id")
  TaskComment TaskComment[]

  @@map("tasks")
}

model TaskComment {
  id      Int    @id @default(autoincrement())
  message String

  Task     Task? @relation(fields: [taskId], references: [id])
  taskId   Int   @map("task_id")
  User     User? @relation(fields: [authorId], references: [id])
  authorId Int   @map("author_id")

  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt @map("update_at")

  @@map("task_comments")
}
